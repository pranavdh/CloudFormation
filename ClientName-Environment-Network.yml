AWSTemplateFormatVersion: 2010-09-09
Description: AWS CFN to build network components of the environment.
Parameters:
  ClientName:
    Default: ClientName
    Description: Short & Single Word name of Client. To be used for tagging resources.
    Type: String
    MinLength: 1
  EnvironmentName:
    Default: POC
    AllowedValues:
      - POC
      - Staging
      - Production
    Description: 'Either Production,Staging. To be used for tagging resorces.'
    Type: String
  VPCCidrBlock:
    Default: 10.0.0.0/16
    Description: CIDR block of VPC being created
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid private CIDR range.
  PublicSubnetCidrBlockA:
    Default: 10.0.1.0/24
    Description: CIDR block of Public Subnet in AZ A
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid private CIDR range.
  PublicSubnetCidrBlockB:
    Default: 10.0.2.0/24
    Description: CIDR block of Public Subnet in AZ B
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid private CIDR range.
  PublicSubnetCidrBlockC:
    Default: 10.0.3.0/24
    Description: CIDR block of Public Subnet in AZ C
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid private CIDR range.
  AppSubnetCidrBlockA:
    Default: 10.0.4.0/24
    Description: CIDR block of App Private Subnet in AZ A
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid private CIDR range.
  AppSubnetCidrBlockB:
    Default: 10.0.5.0/24
    Description: CIDR block of Private Subnet in AZ B
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid private CIDR range.
  AppSubnetCidrBlockC:
    Default: 10.0.6.0/24
    Description: CIDR block of App Private Subnet in AZ C
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid private CIDR range.
  DBSubnetCidrBlockA:
    Default: 10.0.7.0/24
    Description: CIDR block of Private DB Subnet in AZ A
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid private CIDR range.
  DBSubnetCidrBlockB:
    Default: 10.0.8.0/24
    Description: CIDR block of Private DB Subnet in AZ B
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid private CIDR range.
  DBSubnetCidrBlockC:
    Default: 10.0.9.0/24
    Description: CIDR block of Private DB Subnet in AZ C
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid private CIDR range.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Environment Configuration
        Parameters:
          - ClientName
          - EnvironmentName
          - VPCCidrBlock
      - Label:
          default: Public Layer Configuration
        Parameters:
          - PublicSubnetCidrBlockA
          - PublicSubnetCidrBlockB
          - PublicSubnetCidrBlockC
      - Label:
          default: Application/Web Layer Configuration
        Parameters:
          - AppSubnetCidrBlockA
          - AppSubnetCidrBlockB
          - AppSubnetCidrBlockC
      - Label:
          default: ClientName_POC DB Layer Configuration
        Parameters:
          - DBSubnetCidrBlockA
          - DBSubnetCidrBlockB
          - DBSubnetCidrBlockC
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'false'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - VPC
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - a
      CidrBlock: !Ref PublicSubnetCidrBlockA
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - PublicSubnet-A
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
      VpcId: !Ref VPC
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - b
      CidrBlock: !Ref PublicSubnetCidrBlockB
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - PublicSubnet-B
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
      VpcId: !Ref VPC
  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - c
      CidrBlock: !Ref PublicSubnetCidrBlockC
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - PublicSubnet-C
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
      VpcId: !Ref VPC
  AppSubnetA:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - a
      CidrBlock: !Ref AppSubnetCidrBlockA
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - Application-Subnet-A
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
      VpcId: !Ref VPC
  AppSubnetB:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - b
      CidrBlock: !Ref AppSubnetCidrBlockB
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - Application-Subnet-B
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
      VpcId: !Ref VPC
  AppSubnetC:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - c
      CidrBlock: !Ref AppSubnetCidrBlockC
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - Application-Subnet-C
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
      VpcId: !Ref VPC
  DBSubnetA:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - a
      CidrBlock: !Ref DBSubnetCidrBlockA
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - DB-Subnet-A
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
      VpcId: !Ref VPC
  DBSubnetB:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - b
      CidrBlock: !Ref DBSubnetCidrBlockB
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - DB-Subnet-B
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
      VpcId: !Ref VPC
  DBSubnetC:
    Type: 'AWS::EC2::Subnet'
    DependsOn:
      - VPC
    Properties:
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - c
      CidrBlock: !Ref DBSubnetCidrBlockC
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - DB-Subnet-C
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
      VpcId: !Ref VPC
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn:
      - VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - IGW
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  VPCIGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
      - VPC
      - IGW
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - Public-RT
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  PublicRTEntry:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - VPCIGWAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable
  PublicRTSubnetAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnetA
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicRTSubnetAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnetB
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicRTSubnetAssociationC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnetC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC
  EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn:
      - VPC
    Properties:
      Domain: !Ref VPC
  NATGW:
    Type: 'AWS::EC2::NatGateway'
    DependsOn:
      - VPC
      - PublicSubnetA
    Properties:
      AllocationId: !GetAtt 
        - EIP
        - AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - NAT
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - Private-RT
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  PrivateRTEntry:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - PrivateRouteTable
      - NATGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW
      RouteTableId: !Ref PrivateRouteTable
  PrivateRTSubnetAssociationAppA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateRouteTable
      - AppSubnetA
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref AppSubnetA
  PrivateRTSubnetAssociationAppB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateRouteTable
      - AppSubnetB
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref AppSubnetB
  PrivateRTSubnetAssociationAppC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateRouteTable
      - AppSubnetC
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref AppSubnetC
  PrivateRTSubnetAssociationDBA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateRouteTable
      - DBSubnetA
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DBSubnetA
  PrivateRTSubnetAssociationDBB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateRouteTable
      - DBSubnetB
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DBSubnetB
  PrivateRTSubnetAssociationDBC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateRouteTable
      - DBSubnetC
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DBSubnetC
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - PublicNACL
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  PublicSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
      - PublicSubnetA
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
      - PublicSubnetB
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
      - PublicSubnetC
    Properties:
      SubnetId: !Ref PublicSubnetC
      NetworkAclId: !Ref PublicNetworkAcl
  PublicNetworkACLEntry1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  PublicNetworkACLEntry2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  AppNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - AppNACL
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  AppSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
      - AppSubnetA
    Properties:
      SubnetId: !Ref AppSubnetA
      NetworkAclId: !Ref AppNetworkAcl
  AppSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
      - AppSubnetB
    Properties:
      SubnetId: !Ref AppSubnetB
      NetworkAclId: !Ref AppNetworkAcl
  AppSubnetNetworkAclAssociation3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
      - AppSubnetC
    Properties:
      SubnetId: !Ref AppSubnetC
      NetworkAclId: !Ref AppNetworkAcl
  DBNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - DBNACL
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  DBSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
      - DBSubnetA
    Properties:
      SubnetId: !Ref DBSubnetA
      NetworkAclId: !Ref DBNetworkAcl
  DBSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
      - DBSubnetB
    Properties:
      SubnetId: !Ref DBSubnetB
      NetworkAclId: !Ref DBNetworkAcl
  DBSubnetNetworkAclAssociation3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
      - DBSubnetC
    Properties:
      SubnetId: !Ref DBSubnetC
      NetworkAclId: !Ref DBNetworkAcl
  AppNetworkACLEntry1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  AppNetworkACLEntry2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  DBNetworkACLEntry1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DBNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  DBNetworkACLEntry2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DBNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  LBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
      - VPC
    Properties:
      GroupDescription: SG for Load Balancer
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - LB-SG
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  LBSecurityGroupIngress01:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: LBSecurityGroup
    Properties:
      Description: HTTP Port
      GroupId:
        Ref: LBSecurityGroup
      IpProtocol: 'tcp'
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  LBSecurityGroupIngress02:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: LBSecurityGroup
    Properties:
      Description: HTTPS Port
      GroupId:
        Ref: LBSecurityGroup
      IpProtocol: 'tcp'
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
  LBSecurityGroupEgress01:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: LBSecurityGroup
    Properties:
      Description: All Traffic
      GroupId:
        Ref: LBSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  AppSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
      - LBSecurityGroup
    Properties:
      GroupDescription: SG for App/Web Servers
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - !Ref EnvironmentName
              - App-SG
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  AppSecurityGroupIngress01:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AppSecurityGroup
    Properties:
      Description: HTTP Port
      GroupId:
        Ref: AppSecurityGroup
      IpProtocol: 'tcp'
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId: !GetAtt LBSecurityGroup.GroupId
  AppSecurityGroupIngress02:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AppSecurityGroup
    Properties:
      Description: HTTPS Port
      GroupId:
        Ref: AppSecurityGroup
      IpProtocol: 'tcp'
      FromPort: '443'
      ToPort: '443'
      SourceSecurityGroupId: !GetAtt LBSecurityGroup.GroupId
  AppSecurityGroupIngress03:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AppSecurityGroup
    Properties:
      Description: HTTPS Port
      GroupId:
        Ref: AppSecurityGroup
      IpProtocol: 'tcp'
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/16
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for Database Servers
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - DB-SG
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  DBSecurityGroupIngress01:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AppSecurityGroup
    Properties:
      Description: Oracle Port
      GroupId:
        Ref: DBSecurityGroup
      IpProtocol: 'tcp'
      FromPort: '1521'
      ToPort: '1521'
      SourceSecurityGroupId: !GetAtt AppSecurityGroup.GroupId
  DBSecurityGroupEgress01:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: DBSecurityGroup
    Properties:
      Description: All Traffic
      GroupId:
        Ref: DBSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
      - VPC
    Properties:
      GroupDescription: SG for Bastion Host
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ClientName
              - Bastion-SG
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedBy
          Value: MindtreeCOE
  BastionSecurityGroupIngress01:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: BastionSecurityGroup
    Properties:
      Description: MindtreeCOE
      GroupId:
        Ref: BastionSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 1.1.1.1/32
  BastionSecurityGroupIngress02:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: BastionSecurityGroup
    Properties:
      Description: MindtreeCOE
      GroupId:
        Ref: BastionSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 1.1.1.1/32
  BastionSecurityGroupEgress01:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: BastionSecurityGroup
    Properties:
      Description: All Traffic
      GroupId:
        Ref: BastionSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
Outputs:
  VPCIDOP:
    Description: VPC ID being created
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  VPCCIDROP:
    Description: CIDR of VPCbeing created
    Value: !Ref VPCCidrBlock
    Export:
      Name: !Sub '${AWS::StackName}-VPCCidrBlock'
  PublicSubnetAOP:
    Description: Subnet ID of Public Subnet A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetA'
  PublicSubnetBOP:
    Description: Subnet ID of Public Subnet B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetB'
  PublicSubnetCOP:
    Description: Subnet ID of Public Subnet C
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetC'
  AppSubnetAOP:
    Description: Subnet ID of App Subnet A
    Value: !Ref AppSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-AppSubnetA'
  AppSubnetBOP:
    Description: Subnet ID of App Subnet B
    Value: !Ref AppSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-AppSubnetB'
  AppSubnetCOP:
    Description: Subnet ID of App Subnet C
    Value: !Ref AppSubnetC
    Export:
      Name: !Sub '${AWS::StackName}-AppSubnetC'
  DBSubnetAOP:
    Description: Subnet ID of DB Subnet A
    Value: !Ref DBSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-DBSubnetA'
  DBSubnetBOP:
    Description: Subnet ID of DB Subnet B
    Value: !Ref DBSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-DBSubnetB'
  DBSubnetCOP:
    Description: Subnet IDs of DB Subnet C
    Value: !Ref DBSubnetC
    Export:
      Name: !Sub '${AWS::StackName}-DBSubnetC'
  PublicNACLOP:
    Description: ID of Public NACL
    Value: !Ref PublicNetworkAcl
    Export:
      Name: !Sub '${AWS::StackName}-PublicNetworkAcl'
  AppNACLOP:
    Description: ID of AppNACL 
    Value: !Ref AppNetworkAcl
    Export:
      Name: !Sub '${AWS::StackName}-AppNACL'
  DBNACLOP:
    Description: ID of DB NACL
    Value: !Ref DBNetworkAcl
    Export:
      Name: !Sub '${AWS::StackName}-DBNetworkAcl'
  PublicSubnetACIDROP:
    Description: CIDR of PublicSubnetA
    Value: !Ref PublicSubnetCidrBlockA
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetCidrBlockA'
  PublicSubnetBCIDROP:
    Description: CIDR of PublicSubnetC
    Value: !Ref PublicSubnetCidrBlockB
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetCidrBlockB'
  PublicSubnetCCIDROP:
    Description: CIDR of PublicSubnetC
    Value: !Ref PublicSubnetCidrBlockC
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetCidrBlockC'
  AppSubnetCidrBlockAOP:
    Description: CIDR of App SubnetA
    Value: !Ref AppSubnetCidrBlockA
    Export:
      Name: !Sub '${AWS::StackName}-AppSubnetCidrBlockA'
  AppSubnetCidrBlockBOP:
    Description: CIDR of App SubnetB
    Value: !Ref AppSubnetCidrBlockB
    Export:
      Name: !Sub '${AWS::StackName}-AppSubnetCidrBlockB'
  AppSubnetCidrBlockCOP:
    Description: CIDR of App SubnetB
    Value: !Ref AppSubnetCidrBlockC
    Export:
      Name: !Sub '${AWS::StackName}-AppSubnetCidrBlockC'
  DBSubnetACIDROP:
    Description: CIDR of DbSubnetA
    Value: !Ref DBSubnetCidrBlockA
    Export:
      Name: !Sub '${AWS::StackName}-DBSubnetCidrBlockA'
  DBSubnetBCIDROP:
    Description: CIDR of DbSubnetB
    Value: !Ref DBSubnetCidrBlockB
    Export:
      Name: !Sub '${AWS::StackName}-DBSubnetCidrBlockB'
  DBSubnetCCIDROP:
    Description: CIDR of DbSubnetC
    Value: !Ref DBSubnetCidrBlockC
    Export:
      Name: !Sub '${AWS::StackName}-DBSubnetCidrBlockC'
  LBSecurityGroupOP:
    Description: LBSecurityGroup ID
    Value: !Ref LBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-LBSecurityGroup'
  AppSecurityGroupOP:
    Description: App SecurityGroup ID
    Value: !Ref AppSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-AppSecurityGroup'
  DBSecurityGroupOP:
    Description: DBSecurityGroup ID
    Value: !Ref DBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-DBSecurityGroup'
  BastionSecurityGroupOP:
    Description: BastionSecurityGroup ID
    Value: !Ref BastionSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-BastionSecurityGroup'